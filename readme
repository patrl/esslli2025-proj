#+title: Explanation and semantic theory: the case of presupposition
#+subtitle: ESSLLI 2025, Language & Logic track
#+bibliography: ~/texmf/bibtex/bib/master.bib
#+cite_export: csl
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
#+setupfile: latex-template.org
#+OPTIONS: toc:nil
#+author: Patrick D. Elliott and Alexandros Kalomoiros

#+CAPTION: Bochum, Stadtgarten (Wilhelm Walther)
#+ATTR_HTML: :width 512 :style border:2px solid black;
[[./stadtgarten.jpg]]

Last updated: "[2025-03-25 09:58]" 

* Course description

In this class, we chart the development of explanatory approaches to
presupposition projection. We begin by surveying how classical
approaches to the projection problem [cite:@Karttunen1973;@Heim1983]
essentially stipulate projection behavior lexically. We'll
subsequently consider the first wave of explanatory approaches:
namely, the classic trivalent approaches, and the more recent local
contexts approach of [cite/t:@Schlenker2009;@Schlenker2010].
We'll then survey recent experimental work on conjunction and
disjunction, which reveals that the two connectives differ with
respect to the effect of linear order on projection, something not
predicted by the first wave of explanatory approaches. This is used as
a stepping stone to a discussion of the accounts developed by 
[cite/t:@George2008;@George2008a] and [cite/t:@Kalomoiros2023],
which aim for a more satisfactory empirical coverage. Finally, we'll
consider explanatory theories of projection in light of more
challenging configurations involving conditionals and quantifiers.
 
* References
  
#+print_bibliography:

* File local variables                                             :noexport:

# Local Variables:
# mode: org
# time-stamp-line-limit: 1000
# time-stamp-format: "[%Y-%m-%d %H:%M]"
# time-stamp-active: t
# time-stamp-start: "Last updated: \""
# time-stamp-end: "\""
# org-latex-default-packages-alist: nil
# org-latex-with-hyperref: nil
# eval: (add-hook 'before-save-hook (lambda () (if (y-or-n-p "update timestamp?") (time-stamp))) nil t)
# eval: (add-hook 'after-save-hook (lambda () (if (y-or-n-p "export to org?") (org-export-to-file 'org "readme.org"))) nil t)
# eval: (add-hook 'after-save-hook (lambda nil (if (y-or-n-p "export to html?") (org-html-export-to-html))) nil t)
# End:



